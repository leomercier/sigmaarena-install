#!/usr/bin/env bash
set -euo pipefail

# Default to the install dir, but allow override via SIGMA_DIR
SIGMA_DIR="${SIGMA_DIR:-$HOME/sigmaarena}"
COMPOSE_CMD="docker compose"
COMPOSE_FILE="${SIGMA_DIR}/docker-compose.yml"
ENV_FILE="${SIGMA_DIR}/.env"

die() { echo "$*" 1>&2; exit 1; }
ensure_files() { [ -f "$COMPOSE_FILE" ] || die "Missing $COMPOSE_FILE. Run the install first."; }

# Cross-platform sed in-place
sedi() {
  if sed --version >/dev/null 2>&1; then
    sed -i "$@"
  else
    # macOS BSD sed
    sed -i '' "$@"
  fi
}

usage() {
  cat <<EOF
Usage:
  sigma start
  sigma stop
  sigma set --KEY "value" [--ANOTHER "value2"]

Env:
  SIGMA_DIR overrides project dir. Default: $HOME/sigmaarena
EOF
}

cmd_start() {
  ensure_files
  cd "$SIGMA_DIR"
  $COMPOSE_CMD --profile ops up -d
  echo "Started"
}

cmd_stop() {
  ensure_files
  cd "$SIGMA_DIR"
  $COMPOSE_CMD down
  echo "Stopped"
}

ensure_env() {
  mkdir -p "$SIGMA_DIR"
  if [ ! -f "$ENV_FILE" ]; then
    umask 077
    touch "$ENV_FILE"
  fi
}

set_kv() {
  local raw="$1"
  local val="$2"
  local key="${raw#--}"    # strip leading --
  [ -n "$key" ] || die "Empty key"
  ensure_env

  # Remove existing lines for key
  if grep -qE "^${key}=" "$ENV_FILE"; then
    sedi "s|^${key}=.*||" "$ENV_FILE"
    # Clean empty lines
    sedi "/^$/d" "$ENV_FILE"
  fi
  # Append quoted value
  printf '%s="%s"\n' "$key" "$val" >> "$ENV_FILE"
  echo "Set $key"
}

cmd_set() {
  ensure_env
  [ $# -ge 2 ] || die "sigma set --KEY \"value\""
  while [ $# -gt 0 ]; do
    k="$1"; shift || true
    v="${1:-}"
    # If value is missing or next token starts with --, error
    if [ -z "$v" ] || [[ "$v" == --* ]]; then
      die "Missing value for $k"
    fi
    set_kv "$k" "$v"
    shift || true
  done
  echo "Updated $ENV_FILE"
}

main() {
  sub="${1:-}"
  case "$sub" in
    start) shift; cmd_start "$@";;
    stop)  shift; cmd_stop "$@";;
    set)   shift; cmd_set "$@";;
    ""|help|-h|--help) usage;;
    *) die "Unknown command: $sub";;
  esac
}

main "$@"
